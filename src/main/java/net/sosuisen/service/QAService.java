package net.sosuisen.service;

import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.store.embedding.EmbeddingSearchResult;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import lombok.NoArgsConstructor;
import lombok.RequiredArgsConstructor;
import net.sosuisen.ai.annotation.MaxResults;
import net.sosuisen.ai.annotation.StoreJsonPath;
import net.sosuisen.ai.service.EmbeddingSearchService;
import net.sosuisen.model.Document;
import net.sosuisen.model.ParagraphDAO;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Comparator;

@ApplicationScoped
@NoArgsConstructor(force = true)
@RequiredArgsConstructor(onConstructor_ = @Inject)
public class QAService {
    private final ParagraphDAO paragraphDAO;

    @Inject
    @StoreJsonPath("qa_store.json")
    @MaxResults(3)
    private EmbeddingSearchService embeddingSearchService;

    public ArrayList<Document> query(String query) throws SQLException {
        EmbeddingSearchResult<TextSegment> result = embeddingSearchService.search(query);

        if (result.matches().isEmpty()) {
            return null;
        } else {
            var documents = new ArrayList<Document>();
            for (var match : result.matches()) {
                var question = match.embedded().text();
                var answer = match.embedded().metadata().getString("answer");
                var positionTag = match.embedded().metadata().getString("position_tag");
                var context = question + "\n" + answer;
                // Also add a summary of the paragraph generated by the QA to the context.
                var summary = paragraphDAO.get(positionTag);
                if (summary != null) {
                    context += "\n" + summary.getSummary();
                }
                documents.add(new Document("qa",
                        positionTag,
                        match.embedded().metadata().getString("position_name"),
                        match.embedded().metadata().getString("section_title"),
                        context,
                        match.score()));
            }
            // Documents are sorted in descending order by score and in ascending order by position tag.
            documents.sort(
                    Comparator.comparingDouble(Document::getScore).reversed()
                            .thenComparing(Document::getPositionName)
            );
            return documents;
        }
    }

}
